function Smart() {
  this.w="${proxy.white}";
  this.b="${proxy.black}";
  this.g="${proxy.gray}";
  this.regex={
    "white": {
      "domain": new RegExp("${regex.white.domain}"),
      "url": new RegExp("${regex.white.url}")
    },
    "black": {
      "pureip": new RegExp("${regex.black.pureip}"),
      "domain": new RegExp("${regex.black.domain}"),
      "url": new RegExp("${regex.black.url}")
    }
  };
  this.chsips=${JSON.stringify(chsips)};
  this.getProxy=function(url,host){
    var proxy = this.g;
    if( this.regex.white.domain.test(host) )
      proxy = this.w;
    else if( this.regex.white.url.test(url) )
      proxy = this.w;
    else if( !isResolvable(host) )
      proxy = this.b;
    else {
      var ip = dnsResolve(host);
      if (ip==null)
        proxy = this.b;
      else if (isInNet(ip, "10.0.0.0", "255.0.0.0") || isInNet(ip, "172.16.0.0", "255.240.0.0") || isInNet(ip, "192.168.0.0", "255.255.0.0") || isInNet(ip, "127.0.0.0", "255.255.255.0"))
        proxy = this.w; 
      else if( this.regex.black.domain.test(host) )
        proxy = this.b;
      else if( this.regex.black.url.test(url) )
        proxy = this.b;
      else if( this.regex.black.pureip.test(host) )
        proxy = this.b;
      else {
        var m = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/.exec(ip);
        var ipnum = (parseInt(m[1], 10) << 16) * 256 + (parseInt(m[2], 10) << 16) + (parseInt(m[3], 10) << 8) + parseInt(m[4], 10);
        var c, l=0, r=this.chsips.length;
        if( r>0 ) {
          while ( l!=(c=Math.floor((l+r)/2)) ){
            if( this.chsips[c][0]>ipnum )
              r = c
            else
              l = c;
          }
          if( this.chsips[c][0]<=ipnum && this.chsips[c][0]+this.chsips[c][1]>ipnum )
            proxy = this.w;
        }
      }
    }
    return proxy;
  }
}

FindProxyForURL = (function(){
  var smart = new Smart();
  return function(url,host){
    return smart.getProxy(url,host);
  };
})();
